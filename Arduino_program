#include <EEPROM.h>
#include <Arduino.h>
#include <Wire.h>
#include <MPU6050.h>
#include <HID-Project.h>

MPU6050 mpu1;
MPU6050 mpu2(0x69);

#define MAX_SPEED 700        
#define THRESHOLD 10         
#define DEAD_ZONE 350           
#define SCROLL_DELAY 100     
#define SMOOTHING_FACTOR 10 
#define SCROLL_DEADZONE 20   
#define INVERT_SCROLL -1     

#define MAX_SCROLL_SPEED 5
#define MIN_ANGLE 4         
#define MAX_ANGLE 15         

#define MIN_SPEED 1          
#define EXPONENTIAL_FACTOR 2  
#define SMOOTHING_SAMPLES 5   
#define SCROLL_SMOOTHING_SAMPLES 10   

#define EEPROM_INITIALIZED_FLAG 0    
#define EEPROM_CURSOR_SPEED 1       
#define EEPROM_SCROLL_SPEED 2      
#define EEPROM_BUTTON_FUNCTIONS 3   
#define EEPROM_DEAD_ZONE 20        
#define EEPROM_SENSITIVITY 21      

int cursorSpeed = 5;  
int scrollSpeed = 5;  

enum EncoderMode {
  VOLUME_CONTROL,
  HORIZONTAL_SCROLL,
  ZOOM_CONTROL
};

EncoderMode currentEncoderMode = VOLUME_CONTROL;

float scrollAngleHistory[SCROLL_SMOOTHING_SAMPLES] = {0};
int scrollSmoothingIndex = 0;
int scrollStableCount = 0;
const int stableThreshold = 10;
int SENSITIVITY = 100;

int invertX = -1;
int invertY = 1;

int16_t offset_ax1 = 0, offset_ay1 = 0, offset_az1 = 0;
int16_t offset_ax2 = 0, offset_ay2 = 0, offset_az2 = 0;

const int pinLeftButton = 9;
const int pinRightButton = 8;
const int pinMiddleButton = 18;
const int pinForwardButton = 7;
const int pinBackButton = 6;
const int pinCopyButton = 4;
const int pinPasteButton = 5;

const int pinVolumeEncoderA = 10;
const int pinVolumeEncoderB = 16;

int lastVolumeStateA = HIGH;
int lastVolumeStateB = HIGH;
int currentVolumeState = 0;
int lastVolumeState = 0;
int volumePosition = 0;

unsigned long lastScrollTime = 0;
unsigned long lastDebugTime = 0;
const unsigned long DEBUG_INTERVAL = 1000;

bool buttonStates[7] = {false, false, false, false, false, false, false};
bool buttonPressed[7] = {false, false, false, false, false, false, false};
unsigned long lastDebounceTime[7] = {0, 0, 0, 0, 0, 0, 0};
const unsigned long debounceDelay = 50;

String buttonFunctions[7] = {"LeftClick", "RightClick", "MiddleClick", "Forward", "Back", "Copy", "Paste"};

int16_t smoothedAx[SMOOTHING_SAMPLES] = {0};
int16_t smoothedAy[SMOOTHING_SAMPLES] = {0};
int smoothingIndex = 0;

const int FILTER_WINDOW = 10;
float angleHistory[FILTER_WINDOW] = {0};
int historyIndex = 0;

int smallMovementCountX = 0;
int smallMovementCountY = 0;
const int smallMovementThreshold = 5;

struct ButtonFunction {
    char name[15];  
};

void saveButtonFunction(int buttonIndex, String function) {
    int address = EEPROM_BUTTON_FUNCTIONS + (buttonIndex * sizeof(ButtonFunction));
    ButtonFunction bf;
    function.toCharArray(bf.name, sizeof(bf.name));
    EEPROM.put(address, bf);
}

String loadButtonFunction(int buttonIndex) {
    int address = EEPROM_BUTTON_FUNCTIONS + (buttonIndex * sizeof(ButtonFunction));
    ButtonFunction bf;
    EEPROM.get(address, bf);
    return String(bf.name);
}

void saveAllSettings() {
    EEPROM.write(EEPROM_INITIALIZED_FLAG, 0xAA);
    
    EEPROM.write(EEPROM_CURSOR_SPEED, cursorSpeed);
    EEPROM.write(EEPROM_SCROLL_SPEED, scrollSpeed);
    EEPROM.write(EEPROM_DEAD_ZONE, DEAD_ZONE);
    EEPROM.write(EEPROM_SENSITIVITY, SENSITIVITY);
    
    for (int i = 0; i < 7; i++) {
        saveButtonFunction(i, buttonFunctions[i]);
    }
}

void loadAllSettings() {
    if (EEPROM.read(EEPROM_INITIALIZED_FLAG) != 0xAA) {
        setDefaultSettings();
        saveAllSettings();
        return;
    }
    
    cursorSpeed = EEPROM.read(EEPROM_CURSOR_SPEED);
    scrollSpeed = EEPROM.read(EEPROM_SCROLL_SPEED);
    
    // Загружаем функции кнопок
    for (int i = 0; i < 7; i++) {
        buttonFunctions[i] = loadButtonFunction(i);
    }
}

void setDefaultSettings() {
    // Устанавливаем значения по умолчанию
    cursorSpeed = 5;
    scrollSpeed = 5;
    buttonFunctions[0] = "LeftClick";
    buttonFunctions[1] = "RightClick";
    buttonFunctions[2] = "MiddleClick";
    buttonFunctions[3] = "Forward";
    buttonFunctions[4] = "Back";
    buttonFunctions[5] = "Copy";
    buttonFunctions[6] = "Paste";
}

float calculateSmoothedAngle(float newAngle) {
  angleHistory[historyIndex] = newAngle;
  historyIndex = (historyIndex + 1) % FILTER_WINDOW;

  float sum = 0;
  for (int i = 0; i < FILTER_WINDOW; i++) {
    sum += angleHistory[i];
  }
  return sum / FILTER_WINDOW;
}

void setup() {
    Wire.begin();
    Mouse.begin();
    Keyboard.begin();
    Consumer.begin();  
    Serial.begin(115200);

    mpu1.initialize();
    mpu2.initialize();
    if (!mpu1.testConnection() || !mpu2.testConnection()) {
        while (1);
    }

    loadAllSettings();

    pinMode(pinLeftButton, INPUT_PULLUP);
    pinMode(pinRightButton, INPUT_PULLUP);
    pinMode(pinMiddleButton, INPUT_PULLUP);
    pinMode(pinForwardButton, INPUT_PULLUP);
    pinMode(pinBackButton, INPUT_PULLUP);
    pinMode(pinCopyButton, INPUT_PULLUP);
    pinMode(pinPasteButton, INPUT_PULLUP);

    pinMode(pinVolumeEncoderA, INPUT_PULLUP);
    pinMode(pinVolumeEncoderB, INPUT_PULLUP);

    calibrateSensors();
}

void loop() {
  processMouseMovement();
  handleButtons();
  handleScroll();
  handleEncoder();

  if (Serial.available() > 0) {
    handleSerialInput();
  }

  if (millis() - lastDebugTime > DEBUG_INTERVAL) {
    debugOutput();
    lastDebugTime = millis();
  }

  delay(1);
}

void calibrateSensors() {
  int16_t ax, ay, az;
  const int numReadings = 100;
  long sum_ax1 = 0, sum_ay1 = 0, sum_az1 = 0;
  long sum_ax2 = 0, sum_ay2 = 0, sum_az2 = 0;

  for (int i = 0; i < numReadings; i++) {
    mpu1.getAcceleration(&ax, &ay, &az);
    sum_ax1 += ax;
    sum_ay1 += ay;
    sum_az1 += az;
    delay(10);
  }
  offset_ax1 = sum_ax1 / numReadings;
  offset_ay1 = sum_ay1 / numReadings;
  offset_az1 = sum_az1 / numReadings;

  for (int i = 0; i < numReadings; i++) {
    mpu2.getAcceleration(&ax, &ay, &az);
    sum_ax2 += ax;
    sum_ay2 += ay;
    sum_az2 += az;
    delay(10);
  }
  offset_ax2 = sum_ax2 / numReadings;
  offset_ay2 = sum_ay2 / numReadings;
  offset_az2 = sum_az2 / numReadings;
}

void processMouseMovement() {
  int16_t ax1, ay1, az1;
  mpu1.getAcceleration(&ax1, &ay1, &az1);

  ax1 -= offset_ax1;
  ay1 -= offset_ay1;

  smoothedAx[smoothingIndex] = ay1;
  smoothedAy[smoothingIndex] = -ax1;
  smoothingIndex = (smoothingIndex + 1) % SMOOTHING_SAMPLES;

  int32_t sumAx = 0, sumAy = 0;
  for (int i = 0; i < SMOOTHING_SAMPLES; i++) {
    sumAx += smoothedAx[i];
    sumAy += smoothedAy[i];
  }

  float avgAx = (float)sumAx / SMOOTHING_SAMPLES;
  float avgAy = (float)sumAy / SMOOTHING_SAMPLES;

  if (abs(avgAx) < DEAD_ZONE) avgAx = 0;
  if (abs(avgAy) < DEAD_ZONE) avgAy = 0;

  int mouseX = calculateImprovedSpeed(avgAx) * invertX;
  int mouseY = calculateImprovedSpeed(avgAy) * invertY;

  if (mouseX != 0 || mouseY != 0) {
    Mouse.move(mouseX, mouseY, 0);
  }
}

int calculateImprovedSpeed(float accelValue) {
  if (abs(accelValue) < THRESHOLD) {
    return 0;
  }
  
  float normalizedValue = (float)(abs(accelValue) - THRESHOLD) / (16384 - THRESHOLD);
  float expValue = pow(normalizedValue, EXPONENTIAL_FACTOR);
  int speed = (int)(expValue * (cursorSpeed * (MAX_SPEED / 10.0) - MIN_SPEED) + MIN_SPEED);
  speed = constrain(speed, MIN_SPEED, MAX_SPEED);

  return (accelValue < 0) ? -speed : speed;
}

void handleButtons() {
  int buttons[7] = {pinLeftButton, pinRightButton, pinMiddleButton, pinForwardButton, pinBackButton, pinCopyButton, pinPasteButton};

  for (int i = 0; i < 7; i++) {
    bool reading = !digitalRead(buttons[i]);

    if (reading != buttonStates[i]) {
      lastDebounceTime[i] = millis();
    }

    if ((millis() - lastDebounceTime[i]) > debounceDelay) {
      if (reading && !buttonPressed[i]) {
        performButtonFunction(i);
        buttonPressed[i] = true;
      } else if (!reading && buttonPressed[i]) {
        releaseButtonFunction(i);
        buttonPressed[i] = false;
      }
    }

    buttonStates[i] = reading;
  }
}

void handleScroll() {
  int16_t ax2, ay2, az2;
  mpu2.getAcceleration(&ax2, &ay2, &az2);

  ax2 -= offset_ax2;
  ay2 -= offset_ay2;
  az2 -= offset_az2;

  int16_t tilt = ay2;
  float angle = (float)tilt / 16384.0 * 90.0;

  angle = calculateSmoothedAngle(angle);

  if (abs(angle) > MIN_ANGLE) {
    int direction = (angle > 0) ? 1 : -1;
    float scrollSpeedAdjusted = scrollSpeed * (MAX_SCROLL_SPEED / 10.0);
    float scrollSpeedValue = map(constrain(abs(angle), MIN_ANGLE, MAX_ANGLE), MIN_ANGLE, MAX_ANGLE, 1, scrollSpeedAdjusted);
    unsigned long currentTime = millis();

    if (currentTime - lastScrollTime > SCROLL_DELAY) {
      Mouse.move(0, 0, scrollSpeedValue * direction * INVERT_SCROLL);
      lastScrollTime = currentTime;
    }
  }
}

void handleEncoder() {
  int aState = digitalRead(pinVolumeEncoderA);
  int bState = digitalRead(pinVolumeEncoderB);

  if (aState != lastVolumeStateA) {
    if (bState != aState) {
      volumePosition++;
      switch(currentEncoderMode) {
        case VOLUME_CONTROL:
          Consumer.write(MEDIA_VOLUME_UP);
          break;
        case HORIZONTAL_SCROLL:
          Mouse.move(-1, 0, 0);
          break;
        case ZOOM_CONTROL:
          Keyboard.press(KEY_LEFT_CTRL);
          Keyboard.press(KEY_LEFT_SHIFT);
          Keyboard.press('=');
          Keyboard.releaseAll();
          break;
      }
    } else {
      volumePosition--;
      switch(currentEncoderMode) {
        case VOLUME_CONTROL:
          Consumer.write(MEDIA_VOLUME_DOWN);
          break;
        case HORIZONTAL_SCROLL:
          Mouse.move(1, 0, 0);
          break;
        case ZOOM_CONTROL:
          Keyboard.press(KEY_LEFT_CTRL);
          Keyboard.press('-');
          Keyboard.releaseAll();
          break;
      }
    }
  }

  lastVolumeStateA = aState;
  lastVolumeStateB = bState;
}

void handleSerialInput() {
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    
    bool settingsChanged = false;

    if (command.startsWith("CURSOR_SPEED:")) {
      cursorSpeed = command.substring(13).toInt();
      cursorSpeed = constrain(cursorSpeed, 1, 10);
      settingsChanged = true;
    } 
    else if (command.startsWith("SCROLL_SPEED:")) {
      scrollSpeed = command.substring(13).toInt();
      scrollSpeed = constrain(scrollSpeed, 1, 10);
      settingsChanged = true;
    }
    else if (command.startsWith("BTN:")) {
      command = command.substring(4);
      int firstColon = command.indexOf(':');
      int secondColon = command.indexOf(':', firstColon + 1);
      
      if (firstColon != -1 && secondColon != -1) {
        int buttonPin = command.substring(0, firstColon).toInt();
        String function = command.substring(firstColon + 1, secondColon);
        
        int buttonIndex = -1;
        int pins[] = {pinLeftButton, pinRightButton, pinMiddleButton, 
                 pinForwardButton, pinBackButton, pinCopyButton, pinPasteButton};
        
        for (int i = 0; i < 7; i++) {
          if (pins[i] == buttonPin) {
            buttonIndex = i;
            break;
          }
        }
        
        if (buttonIndex != -1) {
          buttonFunctions[buttonIndex] = function;
          settingsChanged = true;
          Serial.print("BTN_SET:");
          Serial.print(buttonPin);
          Serial.print(":");
          Serial.println(function);
        }
      }
    }
    
    if (settingsChanged) {
      saveAllSettings();
      Serial.println("Settings saved to EEPROM");
    }
  }
}

void debugOutput() {
}

void performButtonFunction(int buttonIndex) {
  String function = buttonFunctions[buttonIndex];

  if (function == "LeftClick") {
    Mouse.press(MOUSE_LEFT);
  } else if (function == "RightClick") {
    Mouse.press(MOUSE_RIGHT);
  } else if (function == "MiddleClick") {
    Mouse.press(MOUSE_MIDDLE);
  } else if (function == "Forward") {
    Keyboard.press(KEY_LEFT_ALT);
    Keyboard.press(KEY_RIGHT_ARROW);
    Keyboard.releaseAll();
  } else if (function == "Back") {
    Keyboard.press(KEY_LEFT_ALT);
    Keyboard.press(KEY_LEFT_ARROW);
    Keyboard.releaseAll();
  } else if (function == "Copy") {
    Keyboard.press(KEY_LEFT_CTRL);
    Keyboard.press('c');
    Keyboard.releaseAll();
  } else if (function == "Paste") {
    Keyboard.press(KEY_LEFT_CTRL);
    Keyboard.press('v');
    Keyboard.releaseAll();
  } else if (function == "Ctrl") {
    Keyboard.press(KEY_LEFT_CTRL);
  } else if (function == "Alt") {
    Keyboard.press(KEY_LEFT_ALT);
  } else if (function == "Shift") {
    Keyboard.press(KEY_LEFT_SHIFT);
  }
}

void releaseButtonFunction(int buttonIndex) {
  String function = buttonFunctions[buttonIndex];

  if (function == "LeftClick") {
    Mouse.release(MOUSE_LEFT);
  } else if (function == "RightClick") {
    Mouse.release(MOUSE_RIGHT);
  } else if (function == "MiddleClick") {
    Mouse.release(MOUSE_MIDDLE);
  } else if (function == "Ctrl") {
    Keyboard.release(KEY_LEFT_CTRL);
  } else if (function == "Alt") {
    Keyboard.release(KEY_LEFT_ALT);
  } else if (function == "Shift") {
    Keyboard.release(KEY_LEFT_SHIFT);
  }
}
